# cloudbuild.yaml
steps:
# Langkah 1: Membangun image Docker
- name: 'gcr.io/cloud-builders/docker'
  args: ['build', '-t', 'gcr.io/${PROJECT_ID}/python-web-app:${COMMIT_SHA}', '.']
  id: 'Build Docker Image'

# Langkah 2: Mendorong image Docker ke Google Artifact Registry
- name: 'gcr.io/cloud-builders/docker'
  args: ['push', 'gcr.io/${PROJECT_ID}/python-web-app:${COMMIT_SHA}']
  id: 'Push to Artifact Registry'

# Langkah 3: Mengganti placeholder image di deployment.yaml dengan image yang baru dibangun
# Menggunakan sed untuk mengganti string 'gcr.io/PROJECT_ID/python-web-app:latest'
# dengan image yang baru saja di-push (menggunakan COMMIT_SHA sebagai tag versi)
- name: 'gcr.io/cloud-builders/gcloud'
  entrypoint: 'bash'
  args:
    - '-c'
    - |
      sed -i "s|gcr.io/PROJECT_ID/python-web-app:latest|gcr.io/${PROJECT_ID}/python-web-app:${COMMIT_SHA}|g" deployment.yaml
  id: 'Update Deployment Image'

# Langkah 4: Melakukan deployment ke cluster Kubernetes
# Pastikan Anda telah mengkonfigurasi gcloud untuk mengakses cluster Anda.
# Cloud Build secara otomatis akan menggunakan kredensial akun layanan Cloud Build.
- name: 'gcr.io/cloud-builders/kubectl'
  args: ['apply', '-f', 'deployment.yaml', '-f', 'service.yaml']
  env:
    # Ganti dengan nama cluster dan lokasi/zona cluster Anda
    - 'CLOUDSDK_COMPUTE_ZONE=asia-southeast2-a' # Contoh: us-central1-b
    - 'CLOUDSDK_CONTAINER_CLUSTER=my-first-cluster' # Ganti dengan nama cluster GKE Anda
  id: 'Deploy to Kubernetes'

# Image yang akan disimpan di Artifact Registry
images:
- 'gcr.io/${PROJECT_ID}/python-web-app:${COMMIT_SHA}'

